/*
 * This class file was automatically generated by ASN1bean v1.13.0 (http://www.beanit.com)
 */

package kairos.ocs;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.asn1bean.ber.*;
import com.beanit.asn1bean.ber.types.*;
import com.beanit.asn1bean.ber.types.string.*;


public class BDebitKReq implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private McMsisdn subscriberId = null;
	private IpAddress subscriberIP = null;
	private BerInteger mediatorId = null;
	private MerchantId serviceProviderId = null;
	private AgregatedId contentId = null;
	private BerInteger contentType = null;
	private BerInteger unitsRequested = null;
	private TxnId eventUniqueIdentifier = null;
	private DateTimeStamp chargingTime = null;
	private ProfileType profileType = null;
	private BerBoolean retryFlag = null;
	private TxnId purchaseEventUniqueId = null;
	private DateTimeStamp purchaseChargingTime = null;
	private BerEnum chargingType = null;
	private BerPrintableString additionalInfo = null;
	
	public BDebitKReq() {
	}

	public BDebitKReq(byte[] code) {
		this.code = code;
	}

	public void setSubscriberId(McMsisdn subscriberId) {
		this.subscriberId = subscriberId;
	}

	public McMsisdn getSubscriberId() {
		return subscriberId;
	}

	public void setSubscriberIP(IpAddress subscriberIP) {
		this.subscriberIP = subscriberIP;
	}

	public IpAddress getSubscriberIP() {
		return subscriberIP;
	}

	public void setMediatorId(BerInteger mediatorId) {
		this.mediatorId = mediatorId;
	}

	public BerInteger getMediatorId() {
		return mediatorId;
	}

	public void setServiceProviderId(MerchantId serviceProviderId) {
		this.serviceProviderId = serviceProviderId;
	}

	public MerchantId getServiceProviderId() {
		return serviceProviderId;
	}

	public void setContentId(AgregatedId contentId) {
		this.contentId = contentId;
	}

	public AgregatedId getContentId() {
		return contentId;
	}

	public void setContentType(BerInteger contentType) {
		this.contentType = contentType;
	}

	public BerInteger getContentType() {
		return contentType;
	}

	public void setUnitsRequested(BerInteger unitsRequested) {
		this.unitsRequested = unitsRequested;
	}

	public BerInteger getUnitsRequested() {
		return unitsRequested;
	}

	public void setEventUniqueIdentifier(TxnId eventUniqueIdentifier) {
		this.eventUniqueIdentifier = eventUniqueIdentifier;
	}

	public TxnId getEventUniqueIdentifier() {
		return eventUniqueIdentifier;
	}

	public void setChargingTime(DateTimeStamp chargingTime) {
		this.chargingTime = chargingTime;
	}

	public DateTimeStamp getChargingTime() {
		return chargingTime;
	}

	public void setProfileType(ProfileType profileType) {
		this.profileType = profileType;
	}

	public ProfileType getProfileType() {
		return profileType;
	}

	public void setRetryFlag(BerBoolean retryFlag) {
		this.retryFlag = retryFlag;
	}

	public BerBoolean getRetryFlag() {
		return retryFlag;
	}

	public void setPurchaseEventUniqueId(TxnId purchaseEventUniqueId) {
		this.purchaseEventUniqueId = purchaseEventUniqueId;
	}

	public TxnId getPurchaseEventUniqueId() {
		return purchaseEventUniqueId;
	}

	public void setPurchaseChargingTime(DateTimeStamp purchaseChargingTime) {
		this.purchaseChargingTime = purchaseChargingTime;
	}

	public DateTimeStamp getPurchaseChargingTime() {
		return purchaseChargingTime;
	}

	public void setChargingType(BerEnum chargingType) {
		this.chargingType = chargingType;
	}

	public BerEnum getChargingType() {
		return chargingType;
	}

	public void setAdditionalInfo(BerPrintableString additionalInfo) {
		this.additionalInfo = additionalInfo;
	}

	public BerPrintableString getAdditionalInfo() {
		return additionalInfo;
	}

	@Override public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			reverseOS.write(code);
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (additionalInfo != null) {
			codeLength += additionalInfo.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		if (chargingType != null) {
			codeLength += chargingType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (purchaseChargingTime != null) {
			codeLength += purchaseChargingTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (purchaseEventUniqueId != null) {
			codeLength += purchaseEventUniqueId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (retryFlag != null) {
			codeLength += retryFlag.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		codeLength += profileType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 10
		reverseOS.write(0x8A);
		codeLength += 1;
		
		codeLength += chargingTime.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 9
		reverseOS.write(0x89);
		codeLength += 1;
		
		codeLength += eventUniqueIdentifier.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		reverseOS.write(0x88);
		codeLength += 1;
		
		codeLength += unitsRequested.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		reverseOS.write(0x87);
		codeLength += 1;
		
		codeLength += contentType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += contentId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += serviceProviderId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += mediatorId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		if (subscriberIP != null) {
			codeLength += subscriberIP.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		codeLength += subscriberId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	@Override public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int tlByteCount = 0;
		int vByteCount = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			tlByteCount += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		tlByteCount += length.decode(is);
		int lengthVal = length.val;
		vByteCount += berTag.decode(is);

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			subscriberId = new McMsisdn();
			vByteCount += subscriberId.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			subscriberIP = new IpAddress();
			vByteCount += subscriberIP.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			mediatorId = new BerInteger();
			vByteCount += mediatorId.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			serviceProviderId = new MerchantId();
			vByteCount += serviceProviderId.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			contentId = new AgregatedId();
			vByteCount += contentId.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			contentType = new BerInteger();
			vByteCount += contentType.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			unitsRequested = new BerInteger();
			vByteCount += unitsRequested.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			eventUniqueIdentifier = new TxnId();
			vByteCount += eventUniqueIdentifier.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			chargingTime = new DateTimeStamp();
			vByteCount += chargingTime.decode(is, false);
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			profileType = new ProfileType();
			vByteCount += profileType.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match mandatory sequence component.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			retryFlag = new BerBoolean();
			vByteCount += retryFlag.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			purchaseEventUniqueId = new TxnId();
			vByteCount += purchaseEventUniqueId.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			purchaseChargingTime = new DateTimeStamp();
			vByteCount += purchaseChargingTime.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			chargingType = new BerEnum();
			vByteCount += chargingType.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			additionalInfo = new BerPrintableString();
			vByteCount += additionalInfo.decode(is, false);
			if (lengthVal >= 0 && vByteCount == lengthVal) {
				return tlByteCount + vByteCount;
			}
			vByteCount += berTag.decode(is);
		}
		
		if (lengthVal < 0) {
			if (!berTag.equals(0, 0, 0)) {
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			vByteCount += BerLength.readEocByte(is);
			return tlByteCount + vByteCount;
		}

		throw new IOException("Unexpected end of sequence, length tag: " + lengthVal + ", bytes decoded: " + vByteCount);

	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	@Override public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (subscriberId != null) {
			sb.append("subscriberId: ").append(subscriberId);
		}
		else {
			sb.append("subscriberId: <empty-required-field>");
		}
		
		if (subscriberIP != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subscriberIP: ").append(subscriberIP);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (mediatorId != null) {
			sb.append("mediatorId: ").append(mediatorId);
		}
		else {
			sb.append("mediatorId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceProviderId != null) {
			sb.append("serviceProviderId: ").append(serviceProviderId);
		}
		else {
			sb.append("serviceProviderId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (contentId != null) {
			sb.append("contentId: ").append(contentId);
		}
		else {
			sb.append("contentId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (contentType != null) {
			sb.append("contentType: ").append(contentType);
		}
		else {
			sb.append("contentType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (unitsRequested != null) {
			sb.append("unitsRequested: ").append(unitsRequested);
		}
		else {
			sb.append("unitsRequested: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (eventUniqueIdentifier != null) {
			sb.append("eventUniqueIdentifier: ").append(eventUniqueIdentifier);
		}
		else {
			sb.append("eventUniqueIdentifier: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (chargingTime != null) {
			sb.append("chargingTime: ").append(chargingTime);
		}
		else {
			sb.append("chargingTime: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (profileType != null) {
			sb.append("profileType: ").append(profileType);
		}
		else {
			sb.append("profileType: <empty-required-field>");
		}
		
		if (retryFlag != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("retryFlag: ").append(retryFlag);
		}
		
		if (purchaseEventUniqueId != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("purchaseEventUniqueId: ").append(purchaseEventUniqueId);
		}
		
		if (purchaseChargingTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("purchaseChargingTime: ").append(purchaseChargingTime);
		}
		
		if (chargingType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingType: ").append(chargingType);
		}
		
		if (additionalInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("additionalInfo: ").append(additionalInfo);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

